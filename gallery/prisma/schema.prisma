// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  username  String        @unique
  email     String        @unique
  password  String
  role      Role          @default(USER)
  posts     Post[]
  actions   AdminAction[]
  comments  Comment[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  sessions  Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Post {
  id          String        @id @default(uuid())
  title       String
  description String?
  imageUrl    String
  status      PostStatus    @default(PENDING)
  uploadedBy  User          @relation(fields: [userId], references: [id])
  userId      String
  actions     AdminAction[]
  comments    Comment[]
  gallery     Gallery?      @relation(fields: [galleryId], references: [id])
  galleryId   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model AdminAction {
  id        String   @id @default(uuid())
  action    Action
  reason    String?
  admin     User     @relation(fields: [adminId], references: [id])
  adminId   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Gallery {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
  PUBLISHED
}

enum Action {
  APPROVED
  REJECTED
  PUBLISHED
}
