---
import "../styles/global.css";
import Footer from "../components/Footer.astro";
import NavigationBar from "../components/NavigationBar.astro";
import {Astro} from "astro/env";

type Props = {
    title: string;
}

const {title} = Astro.props;
---

<html lang="en">
<head>
    <meta charset="utf-8"/>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg"/>
    <meta name="viewport" content="width=device-width"/>
    <meta name="generator" content={Astro.generator}/>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
          rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Matemasie&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
          rel="stylesheet">
    <title>{title}</title>
    <script is:inline>
        const DARK_CLASS = "dark";
        const COLOR_MODE = "color-mode";
        const LIGHT_THEME = "light";
        const DARK_THEME = "dark";
        const rootElement = document.documentElement;

        const getInitColorMode = () => {
            const savedColorMode = window.localStorage.getItem(COLOR_MODE);
            if (savedColorMode) {
                return savedColorMode;
            }
            if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
                return DARK_THEME;
            }
            return LIGHT_THEME;
        };

        const initColorMode = getInitColorMode();
        const setInitColorMode = (mode) => {
            if (mode === LIGHT_THEME) {
                rootElement.classList.remove(DARK_CLASS);
            } else {
                rootElement.classList.add(DARK_CLASS);
            }
        }

        setInitColorMode(initColorMode)
    </script>
</head>
<body>
<main>
    <NavigationBar/>
    <slot/>
    <Footer/>
</main>
</body>
</html>
